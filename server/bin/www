#!/usr/bin/env node

'use strict';

let fs = require('fs');
// Ensure we have a user-defined config.js for use throughout the app.
try {
  fs.accessSync('./config.js', fs.F_OK);
} catch (e) {
  console.error('Cannot start Flood server, config.js is missing. Copy ' +
    'config.template.js to config.js.');
  return;
}

var app = require('../app');
let config = require('../../config');
var debug = require('debug')('flood:server');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.floodServerPort);
app.set('port', port);

/**
 * Create HTTP or HTTPS server.
 */
 
let server;

if (config.ssl) {
  if (!config.sslKey || ! config.sslCert){
    console.error('Cannot start Flood server in secure mode, `sslKey` or `sslCert` is missing in config.js.');
    return;
  }
  
  var options = {
    key: fs.readFileSync(config.sslKey),
    cert: fs.readFileSync(config.sslCert)
  };
  server = require('https').createServer(options, app);
  
} else {
  server = require('http').createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
